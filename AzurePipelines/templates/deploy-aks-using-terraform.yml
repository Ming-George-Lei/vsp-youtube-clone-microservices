parameters:
  - name: envName
    type: string
  - name: azureServiceConnection
    type: string
  - name: terraformVersion
    type: string
  - name: backendResourceGroupName
    type: string
  - name: backendResourceGroupLocation
    type: string
  - name: backendAccountSku
    type: string
  - name: backendStorageAccountName
    type: string
  - name: backendContainerName
    type: string
  - name: backendKey
    type: string
  - name: sshKeyFile
    type: string
  - name: terraformVarsFile
    type: string

jobs:
  - deployment: Deployment
    environment: ${{ parameters.envName }}
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadSecureFile@1
              displayName: Download ssh key file
              name: sshKeyFile
              inputs:
                secureFile: ${{ parameters.sshKeyFile }}
            - task: DownloadSecureFile@1
              displayName: Download terraform vars file
              name: terraformVarsFile
              inputs:
                secureFile: ${{ parameters.terraformVarsFile }}
            - task: TerraformInstaller@0
              displayName: Install terraform tool
              inputs:
                terraformVersion: ${{ parameters.terraformVersion }}
            - task: TerraformCLI@0
              displayName: Terraform init
              inputs:
                command: "init"
                workingDirectory: "$(Pipeline.Workspace)/terraform-manifest"
                backendType: "azurerm"
                backendServiceArm: ${{ parameters.azureServiceConnection }}
                ensureBackend: true
                backendAzureRmResourceGroupName: ${{ parameters.backendResourceGroupName }}
                backendAzureRmResourceGroupLocation: ${{ parameters.backendResourceGroupLocation }}
                backendAzureRmStorageAccountName: ${{ parameters.backendStorageAccountName }}
                backendAzureRmStorageAccountSku: ${{ parameters.backendAccountSku }}
                backendAzureRmContainerName: ${{ parameters.backendContainerName }}
                backendAzureRmKey: ${{ parameters.backendKey }}
                allowTelemetryCollection: true
            - task: TerraformCLI@0
              displayName: Terraform validate
              inputs:
                command: "validate"
                workingDirectory: "$(Pipeline.Workspace)/terraform-manifest"
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform plan
              inputs:
                command: "plan"
                workingDirectory: "$(Pipeline.Workspace)/terraform-manifest"
                environmentServiceName: ${{ parameters.azureServiceConnection }}
                runAzLogin: true
                allowTelemetryCollection: false
                commandOptions: |
                  -var-file $(terraformVarsFile.secureFilePath) 
                  -var "aks_ssh_public_key_path=$(sshKeyFile.secureFilePath)" 
                  -out "$(Pipeline.Workspace)/terraform-manifest/plan-${{ parameters.envName }}-$(Build.BuildId).out"
            - task: TerraformCLI@0
              displayName: Terraform apply
              inputs:
                command: 'apply'
                workingDirectory: "$(Pipeline.Workspace)/terraform-manifest"
                environmentServiceName: '${{ parameters.azureServiceConnection }}'
                runAzLogin: true
                commandOptions: '$(Pipeline.Workspace)/terraform-manifest/plan-${{ parameters.envName }}-$(Build.BuildId).out'
                allowTelemetryCollection: false
